syntax = "proto3";

option go_package = "github.com/BluBracket/database-risk-scanner/grpc/api";

package api;

// Risk describes a risk found in a source file
message Risk {
    // category is a risk category like SECRET, NIL, or PII
    string category = 1;
    // type is a risk type, e.g. password_assignment
    string type = 2;
    // repo_file_path is file path relative to the repo's root directory
    // where the risk was found
    // can be empty if the file is not in the repo directory
    string repo_file_path = 3;
    // line1 is the start line number where the risk was found
    // line number is one-based
    int32 line1 = 4;
    // line2 is the end line number where the risk was found
    // note: for most risks line2 will be the same as line1
    int32 line2 = 5;
    // col1 is the start column number where the risk was found
    // column number is one-based
    int32 col1 = 6;
    // col2 is the end column number where the risk was found
    int32 col2 = 7;
    // tags are an arbitrary meta information assigned to the risk
    // the map's keys are tag names;
    // the values are json-encoded per-tag specific data
    map<string, string> tags = 8;
    // severity is risk severity like info, low, medium, high, critical
    string severity = 9;
    // value is the risk value
    string value = 10;
    // textual_context is text around the risk value
    string textual_context = 11;
}

// AnalyzeStreamMetadata contains stream metadata attribute(s)
// context may contain contextual information needed for co-relation
message AnalyzeStreamMetadata {
    string stream_name = 1;
    string context = 2;
}

// AnalyzeStreamRequest contains input parameters for AnalyzeStream method
message AnalyzeStreamRequest {
    // metadata contains stream metadata. it is sent only in the first msg on stream.
    AnalyzeStreamMetadata metadata = 1;
    // data contains chunk of data. it is sent in one or more msgs (after metadata msg) on stream.
    bytes data = 2;
}

// AnalyzeStreamResponse contains a response for AnalyzeStream method
message AnalyzeStreamResponse {
    // risk contains information about found risk
    Risk risk = 1;
    // metadata is the last metadata msg on request stream. it is sent back for co-relation.
    AnalyzeStreamMetadata metadata = 2;
}
     
// The BluBracket service definition.
service BluBracket {
    // AnalyzeStream analyzes multiple streams of data and sends back stream of risks detected. 
    // Note: for each stream first msg sent on the stream must contain metadata of stream. 
    // metadata msg may contain context required for corelation. metadata is sent back in the response msg.
    // metadata msg is followed by data messages containing data to be analyzed for the stream.
    // 
    // once all data is sent - request stream must be closed with CloseSend().
    // as soon as a risk is detected on incoming stream of data, it will be sent as response.
    // once all the risks are returned - response stream will be closed (io.EOF).
    // In case of cancellation, AnalyzeStream will abort as soon as the analysis
    // of current data in progress completes.
    rpc AnalyzeStream(stream AnalyzeStreamRequest) returns (stream AnalyzeStreamResponse);
}

   
